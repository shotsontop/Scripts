--[[
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
██░▄▄▄░██░██░██░▄▄▄░█▄▄░▄▄██░▄▄▄░██░███░█░▄▄▀██░▄▄▀██░▄▄▄
██▄▄▄▀▀██░▄▄░██░███░███░████▄▄▄▀▀██░█░█░█░▀▀░██░▀▀▄██░▄▄▄
██░▀▀▀░██░██░██░▀▀▀░███░████░▀▀▀░██▄▀▄▀▄█░██░██░██░██░▀▀▀
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
Last updated 20/10/2024.
Supported Games: Timebomb Duels, Custom Minigames.
]]--
local teamCheck = false
local fov = 90
local smoothing = 0.1
local predictionFactor = 0
local highlightEnabled = false
local lockPart = "HumanoidRootPart"

local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

local message = Drawing.new("Text")
message.Text = "Timebomb Autotrack [TEST] (If you have any inquiries, dm @kmlt on discord!)"
message.Size = 30
message.Color = Color3.fromRGB(255, 255, 255)
message.Position = Vector2.new(0, 0)
message.Center = true
message.Visible = true

local visibleDuration = 5
local colorTransitionTime = 5
local elapsedTime = 0

message.Visible = true

local FOVring = Drawing.new("Circle")
FOVring.Visible = true
FOVring.Thickness = 1
FOVring.Radius = fov
FOVring.Transparency = 0.8

local Tracer = Drawing.new("Line")
Tracer.Visible = false
Tracer.Thickness = 1

local currentTarget = nil
local aimbotEnabled = true

local function getClosest(cframe, mousePosition)
    local ray = Ray.new(cframe.Position, cframe.LookVector).Unit
    local target = nil
    local mag = math.huge

    for i, v in pairs(Players:GetPlayers()) do
        if v.Character and v.Character:FindFirstChild(lockPart) and v.Character:FindFirstChild("Humanoid") and v.Character:FindFirstChild("HumanoidRootPart") and v ~= Players.LocalPlayer and (v.Team ~= Players.LocalPlayer.Team or not teamCheck) then
            local screenPoint, onScreen = workspace.CurrentCamera:WorldToViewportPoint(v.Character[lockPart].Position)
            local distanceFromMouse = (Vector2.new(screenPoint.X, screenPoint.Y) - mousePosition).Magnitude

            if onScreen and distanceFromMouse <= FOVring.Radius then
                local magBuf = (v.Character[lockPart].Position - ray:ClosestPoint(v.Character[lockPart].Position)).Magnitude

                if magBuf < mag then
                    mag = magBuf
                    target = v
                end
            end
        end
    end

    return target
end

local function updateFOVRing(mousePosition)
    FOVring.Position = mousePosition
end

local function highlightTarget(target)
    if highlightEnabled and target and target.Character then
        local highlight = Instance.new("Highlight")
        highlight.Adornee = target.Character
        highlight.FillColor = Color3.fromRGB(255, 128, 128)
        highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
        highlight.Parent = target.Character
    end
end

local function removeHighlight(target)
    if highlightEnabled and target and target.Character and target.Character:FindFirstChildOfClass("Highlight") then
        target.Character:FindFirstChildOfClass("Highlight"):Destroy()
    end
end

local function predictPosition(target)
    if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
        local velocity = target.Character.HumanoidRootPart.Velocity
        local position = target.Character[lockPart].Position
        local predictedPosition = position + (velocity * predictionFactor)
        return predictedPosition
    end
    return nil
end

local function updateTracer(target, mousePosition)
    if target and target.Character and target.Character:FindFirstChild(lockPart) then
        local screenPoint = workspace.CurrentCamera:WorldToViewportPoint(target.Character[lockPart].Position)
        local angle = (tick() * 100) % 360
        local radians = math.rad(angle)
        local offsetX = math.cos(radians) * FOVring.Radius
        local offsetY = math.sin(radians) * FOVring.Radius
        Tracer.From = FOVring.Position + Vector2.new(offsetX, offsetY)
        Tracer.To = Vector2.new(screenPoint.X, screenPoint.Y)
        Tracer.Visible = true
    else
        Tracer.Visible = false
    end
end

RunService.RenderStepped:Connect(function()
    local screenSize = workspace.CurrentCamera.ViewportSize
    message.Position = Vector2.new(screenSize.X / 2, screenSize.Y / 2)

    if aimbotEnabled then
        local mousePosition = UserInputService:GetMouseLocation()
        updateFOVRing(mousePosition)

        if UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
            if not currentTarget then
                currentTarget = getClosest(workspace.CurrentCamera.CFrame, mousePosition)
                highlightTarget(currentTarget)
            end

            if currentTarget and currentTarget.Character and currentTarget.Character:FindFirstChild(lockPart) then
                local predictedPosition = predictPosition(currentTarget)
                if predictedPosition then
                    local camPosition = workspace.CurrentCamera.CFrame.Position
                    local targetDirection = (predictedPosition - camPosition).Unit
                    workspace.CurrentCamera.CFrame = CFrame.new(camPosition, camPosition + targetDirection)
                    workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(CFrame.new(camPosition, predictedPosition), smoothing)
                end
            end

            updateTracer(currentTarget, mousePosition)
        else
            if currentTarget and highlightEnabled then
                removeHighlight(currentTarget)
            end
            currentTarget = nil
            Tracer.Visible = false
        end

        elapsedTime = elapsedTime + RunService.RenderStepped:Wait()
        local t = (elapsedTime % colorTransitionTime) / colorTransitionTime
        local color1 = Color3.fromRGB(0, 0, 0)
        local color2 = Color3.fromRGB(255, 255, 255)
        local color3 = Color3.fromRGB(128, 128, 128)

        if t < 1/3 then
            FOVring.Color = color1:Lerp(color2, t * 3)
            Tracer.Color = color1:Lerp(color2, t * 3)
            message.Color = color1:Lerp(color2, t * 3)
        elseif t < 2/3 then
            FOVring.Color = color2:Lerp(color3, (t - 1/3) * 3)
            Tracer.Color = color2:Lerp(color3, (t - 1/3) * 3)
            message.Color = color2:Lerp(color3, (t - 1/3) * 3)
        else
            FOVring.Color = color3:Lerp(color1, (t - 2/3) * 3)
            Tracer.Color = color3:Lerp(color1, (t - 2/3) * 3)
            message.Color = color3:Lerp(color1, (t - 2/3) * 3)
        end

        if elapsedTime >= visibleDuration then
            message.Visible = false
        end
    end
end)
